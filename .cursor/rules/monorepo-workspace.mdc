---
alwaysApply: true
description: Yarn Workspaces monorepo management and development workflow
---

# Monorepo Workspace Management 🏢

SubZilla uses **Yarn Workspaces** with **TypeScript Project References** for efficient monorepo development.

## 📦 Workspace Configuration

### Root Package.json ([package.json](mdc:package.json))

```json
{
    "private": true,
    "workspaces": ["packages/*"],
    "scripts": {
        "build": "tsc --build && yarn workspaces foreach --all run build",
        "start": "yarn workspace @subzilla/cli start",
        "dev": "yarn workspaces foreach --all --parallel run dev"
    }
}
```

### TypeScript Project References ([tsconfig.json](mdc:tsconfig.json))

```json
{
    "references": [
        { "path": "./packages/types" },
        { "path": "./packages/core" },
        { "path": "./packages/cli" }
    ]
}
```

## 🔗 Package Dependencies

### Internal Dependencies

```json
// packages/core/package.json
{
  "dependencies": {
    "@subzilla/types": "workspace:*"
  }
}

// packages/cli/package.json
{
  "dependencies": {
    "@subzilla/core": "workspace:*",
    "@subzilla/types": "workspace:*"
  }
}
```

### Dependency Rules

- **@subzilla/types**: No internal dependencies (foundation)
- **@subzilla/core**: Can depend on types only
- **@subzilla/cli**: Can depend on core and types
- **No circular dependencies** between packages

## 🛠️ Development Commands

### Workspace-Level Commands

```bash
# Install all dependencies (run from root)
yarn install

# Build all packages in dependency order
yarn build

# Start development mode (all packages)
yarn dev

# Run CLI application
yarn start

# Clean all build artifacts
yarn clean
```

### Package-Specific Commands

```bash
# Build specific package
yarn workspace @subzilla/core build

# Run specific package in dev mode
yarn workspace @subzilla/types dev

# Run CLI directly
yarn workspace @subzilla/cli start

# Add dependency to specific package
yarn workspace @subzilla/core add lodash
yarn workspace @subzilla/core add -D @types/lodash
```

### Cross-Package Development

```bash
# Build dependencies first, then target package
yarn workspace @subzilla/types build
yarn workspace @subzilla/core build
yarn workspace @subzilla/cli build

# Or use project references (recommended)
yarn build  # Builds in correct order automatically
```

## 🔄 Build Process

### TypeScript Project References

- **Incremental builds**: Only rebuild changed packages
- **Dependency tracking**: Automatic build order resolution
- **IDE support**: Better IntelliSense across packages
- **Type checking**: Cross-package type validation

### Build Order (Automatic)

1. **@subzilla/types** (no dependencies)
2. **@subzilla/core** (depends on types)
3. **@subzilla/cli** (depends on core and types)

### Build Outputs

```
packages/
├── types/dist/           # Compiled types package
├── core/dist/            # Compiled core package
└── cli/dist/             # Compiled CLI package
```

## 📁 File Organization

### Package Structure Template

```
packages/[package-name]/
├── src/                  # Source TypeScript files
├── dist/                 # Compiled JavaScript (gitignored)
├── package.json          # Package configuration
├── tsconfig.json         # TypeScript configuration
└── README.md             # Package documentation
```

### Cross-Package Imports

```typescript
// ✅ Correct - use workspace package names
import { IConfig } from '@subzilla/types';
import SubtitleProcessor from '@subzilla/core';

// ❌ Incorrect - relative paths across packages
import { IConfig } from '../../types/src/config';
```

## 🎯 Development Workflow

### Adding New Features

1. **Define types** in `@subzilla/types` first
2. **Implement core logic** in `@subzilla/core`
3. **Add CLI interface** in `@subzilla/cli`
4. **Build and test** across all packages

### Making Changes

```bash
# 1. Make changes to source files
# 2. Build affected packages
yarn workspace @subzilla/types build
yarn workspace @subzilla/core build

# 3. Test changes
yarn start --help

# 4. Or use watch mode for development
yarn dev  # Watches all packages
```

### Adding Dependencies

#### External Dependencies

```bash
# Add to specific package
yarn workspace @subzilla/core add yaml
yarn workspace @subzilla/core add -D @types/yaml

# Add to root (shared dev dependencies)
yarn add -D -W typescript eslint prettier
```

#### Internal Dependencies

```bash
# Already configured in package.json as:
"@subzilla/types": "workspace:*"

# Yarn automatically resolves to local workspace
```

## 🔧 Configuration Management

### Shared Configuration

- **ESLint**: [eslint.config.js](mdc:eslint.config.js) (root level)
- **TypeScript**: Base config in root, extended in packages
- **Prettier**: Shared formatting rules
- **Git**: Single repository with shared .gitignore

### Package-Specific Configuration

```typescript
// packages/core/tsconfig.json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "references": [
    { "path": "../types" }
  ]
}
```

## 🚀 Performance Optimization

### Parallel Development

```bash
# Run all packages in parallel watch mode
yarn dev

# Equivalent to:
yarn workspaces foreach --all --parallel run dev
```

### Incremental Builds

- **TypeScript project references** enable incremental compilation
- **Only changed packages** are rebuilt
- **Dependency graph** automatically maintained

### Caching

- **Yarn cache**: Shared dependencies across packages
- **TypeScript cache**: Incremental build information
- **Node modules**: Hoisted to root when possible

## 🔍 Troubleshooting

### Common Issues

#### Build Errors

```bash
# Clean and rebuild everything
yarn clean
yarn build

# Check TypeScript project references
tsc --build --dry
```

#### Dependency Issues

```bash
# Reinstall all dependencies
rm -rf node_modules packages/*/node_modules
yarn install

# Check workspace resolution
yarn workspaces list
```

#### Type Errors

```bash
# Check cross-package types
yarn workspace @subzilla/core type-check
yarn workspace @subzilla/cli type-check
```

### Development Tips

- **Use `yarn dev`** for active development (watch mode)
- **Build before committing** to catch integration issues
- **Check all packages** when making breaking changes
- **Use workspace commands** instead of cd-ing into packages

## 📋 Best Practices

### Package Management

- **Keep packages focused** on single responsibilities
- **Minimize cross-package dependencies**
- **Use semantic versioning** for published packages
- **Document breaking changes** in package READMEs

### Development Workflow

- **Start with types** when adding new features
- **Build incrementally** during development
- **Test cross-package integration** regularly
- **Use workspace scripts** for consistency

### Performance

- **Leverage TypeScript project references** for fast builds
- **Use parallel execution** where possible
- **Cache build artifacts** appropriately
- **Monitor bundle sizes** for published packages

This monorepo structure enables efficient development while maintaining clear separation of concerns across the SubZilla ecosystem.
