---
alwaysApply: true
description: Strict execution rules and critical partner mindset for development
---

# STRICT EXECUTION RULES

## CRITICAL PARTNER MINDSET

Do not affirm my statements or assume my conclusions are correct. Question assumptions, offer counterpoints, test reasoning. Prioritize truth over agreement.

## EXECUTION SEQUENCE (always reply with "Applying rules X,Y,Z")

1.  **SEARCH FIRST** - Use codebase_search/grep/web_search/MCP tools until finding similar functionality or confirming none exists. Investigate deeply, be 100% sure before implementing.
2.  **REUSE FIRST** - Check existing functions/patterns/structure. Extend before creating new. Strive to smallest possible code changes
3.  **NO ASSUMPTIONS** - Only use: files read, user messages, tool results. Missing info? Search then ask user.
4.  **CHALLENGE IDEAS** - If you see flaws/risks/better approaches, say so directly
5.  **BE HONEST** - State what's needed/problematic, don't sugarcoat to please

## CODING STANDARDS (SubZilla-Adapted)

### Code Organization

- **Plan before coding**, explain reasoning for complex suggestions
- **Write self-documenting code** with clear, descriptive names
- **Use JSDoc comments** for public APIs and complex business logic
- **Include inline comments** only when the "why" isn't obvious from the code
- **Keep imports alphabetically sorted** within groups (Node.js built-ins, external packages, internal packages)

### Architecture Principles

- **Keep code SOLID but simple** - separation of concerns without over-engineering
- **Follow existing patterns**: Strategy pattern for output handling, Service layer for business logic
- **Aim to keep files under 300 lines** - split when it improves clarity
- **Use emoji logging** for user-facing messages (üîç, ‚úÖ, ‚ùå, ‚ö†Ô∏è, üìä)

### SubZilla-Specific Patterns

- **Default exports for classes**, named exports for interfaces/types
- **Use options objects** instead of multiple parameters (max 3-4 params)
- **Comprehensive error handling** with context and graceful degradation
- **TypeScript strict mode** with explicit return types for public methods
